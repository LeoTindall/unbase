
Steps Believed necessary for the passage of the first self-consistency test case:

[X] Arc-ify SlabRef ( necessary because of all the memorefs that will be pointing to it for peering management )
[X] Enable MemoRef management by the Slab
  [X] For the memo itself
  [X] For memo -> parent memos
[X] Finish renaming Record -> Subject
[X] Finish basic subject subscription plumbing
[~] Implement simulator
    [ ] Move XYZPoint out of network::Sender into slab
    [ ] Determine how to make second order effects deterministic
    [ ] Revise test suite with more robust spatial scenarios
[ ] Dummy memo durability scoring
    [ ] hardcode zero
    [ ] stop endless memo emission / bouncing
[~] Subject indexes
    [X] Dummy subject head index
    [X] All received memos get mindlessly jammed into subject head index
    [ ] subject head index is actually pruned to leave only the head memos
    [ ] subject head index is itself built from memos
[X] memo body
[X] memo peering
[ ] memo retrieval for projection
[~] Basic state projection logic
    [X] Extremely basic Causal LWW hash keys
    [ ] Differentiable data types
[ ] Slab arc vs SlabRef arc - eliminate unnecessary double-Arc and switch all Slab handles to SlabRef handles?
[ ] memo durability scoring
[ ] durability scoring buckets (start with fixed number of buckets, later make it variable)
[ ] Memo -> relation memos
[ ] Update slab.subject_subscriptions to use memo-based projection in lieu of hashmap
    (local subscriptions should be no different from nonlocal subscriptions)
[ ] Update SlabRef to accept different kinds of channels, not just simulator channels
[ ] Peering Memos
  [ ] Emit Goodbye memos for slabs that are shutting down
  [ ] Local Peering Memos?

 _________________________________________________
| SLAB                                            |
|  MemoRef A (peers) -> Memo A                    |
|                       |                         |
|                    MemoRef B (peers) -> Memo B  |
|_________________________________________________|


Durability Buckets:

Bucket 1 (min,max) [
    MemoRef (peers,score),
    ...
]

MemoPeerRef (peer,score)
