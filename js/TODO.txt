
First pass, node.js proof of concept implementation

Phase 1 (proof of concept)

[X] Compose memos into records
[X] Properly determine which memos are the head of a record
[X] Reconstitute records from memos
[X] Edit propagation to other slabs
[ ] Async memo retrieval for non-head memos
[ ] Test script cleanup
[ ] Indexing implementation
[ ] Causal barriers
[ ] Deterministic/Idempotent computed memos ( memo id as hash of precursors, peering with independently created replicas )

Phase 2 ( Trust everyone )
[ ] Peering with trusted slabs
[~] Very Basic CRDT - Deterministic winner
[ ] Transfer rendered records with memo head
[ ] Distributed queue implementation
[ ] Distributed content filter implementation
[ ] Transferring related records
[ ] Responsibility pressure - Exponential
[ ] Memory pressure - Exponential
[ ] CPU pressure - Exponential
[ ] TTL - Linear
[ ] Transport channels ( model on telehash interface )

Notes:
A queue is just a table with a priority/rough sequence, and garbage collection
A matching tree is just an index tree that's a bit of a busybody.
A subscription is just two memos: one to start it, and one to stop it.


Phase 3 ( Policy / Crypto )
[ ] Basic policy authority ( eventually should support policy delegation, independent policy authorities; per tlns? )
[ ] Memo signatures
[ ] Memo validation
[ ] Peering with untrusted slabs

Notes:
What's the namespace for this policy?
What record types are there
What metadata is required per each record / record type
Who can do what?
Who can offer what?

Future phases:

Schema management
Service discovery
Triggers
